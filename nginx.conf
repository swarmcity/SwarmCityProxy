daemon off;

user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
        worker_connections 768;
}

http {
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        server_tokens off;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        server_names_hash_bucket_size 64;
        proxy_cache_path  /data/nginx/cache  levels=1:2   keys_zone=STATIC:10m  inactive=24h  max_size=1g use_temp_path=off;

        etag on;

        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        client_max_body_size 128m;
        fastcgi_buffers 8 64k;
        fastcgi_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_buffer_size 128k;
        proxy_busy_buffers_size 256k;

        client_body_timeout 10s;
        client_header_timeout 10s;

        limit_req_status 444;
        limit_req_zone $binary_remote_addr zone=site:10m rate=100r/s;
        limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
        
        # To debug cache related things
        add_header X-Cache-Status $upstream_cache_status;

	# Enable gzip compression.
        # Default: off
        gzip on;

        # Compression level (1-9).
        # 5 is a perfect compromise between size and CPU usage, offering about
        # 75% reduction for most ASCII files (almost identical to level 9).
        # Default: 1
        gzip_comp_level 5;

        # Don't compress anything that's already small and unlikely to shrink much
        # if at all (the default is 20 bytes, which is bad as that usually leads to
        # larger files after gzipping).
        # Default: 20
        gzip_min_length 256;

        # Compress data even for clients that are connecting to us via proxies,
        # identified by the "Via" header (required for CloudFront).
        # Default: off
        gzip_proxied any;

        # Tell proxies to cache both the gzipped and regular version of a resource
        # whenever the client's Accept-Encoding capabilities header varies;
        # Avoids the issue where a non-gzip capable client (which is extremely rare
        # today) would display gibberish if their proxy gave them the gzipped version.
        # Default: off
        gzip_vary on;

        # Compress all output labeled with one of the following MIME-types.
        # text/html is always compressed by gzip module.
        # Default: text/html
        gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;

        # This should be turned on if you are going to have pre-compressed copies (.gz) of
        # static files available. If not it should be left off as it will cause extra I/O
        # for the check. It is best if you enable this in a location{} block for
        # a specific directory, or on an individual server{} level.
        # gzip_static on;

        log_format upstream_time        'timestamp="$time_local" client=$remote_addr '
                                        'request="$request" request_length=$request_length '
                                        'bytes_sent=$bytes_sent '
                                        'body_bytes_sent=$body_bytes_sent '
                                        'referer=$http_referer '
                                        'user_agent="$http_user_agent" '
                                        'upstream_addr=$upstream_addr '
                                        'upstream_status=$upstream_status '
                                        'request_time=$request_time '
                                        'upstream_response_time=$upstream_response_time '
                                        'upstream_connect_time=$upstream_connect_time '
                                        'upstream_header_time=$upstream_header_time ';

        # Include files in the sites-enabled folder. server{} configuration files should be
        # placed in the sites-available folder, and then the configuration should be enabled
        # by creating a symlink to it in the sites-enabled folder.
        # See doc/sites-enabled.md for more info.
	include /etc/nginx/sites-enabled/*;	

        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;
        
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
}
